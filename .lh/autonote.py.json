{
    "sourceFile": "autonote.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 32,
            "patches": [
                {
                    "date": 1642194160054,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1642194167318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,8 +97,10 @@\n                         notes.append(\r\n                             sent\r\n                         )  # Add the sentence to the notes list if it is not already there.\r\n \r\n+    return notes\r\n+\r\n with open(\"notes.md\", \"w\", encoding=\"utf8\") as f:\r\n     print(\"\\033[1m\\033[1mHISTORY CLASS NOTES\")\r\n     f.write('# **History Class Notes**\\n\\n')\r\n     title = \"The Republicans Take Power\"\r\n"
                },
                {
                    "date": 1642194177216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,8 +43,9 @@\n # flines = []\r\n # for line in lines:\r\n #     flines.append(\" \".join([word for word in line.split() if word.lower() not in stopw]))\r\n \r\n+def extract(text)\r\n     notes = []\r\n \r\n     for para in text:  # Extractor\r\n         if not para or para == \"\":\r\n"
                },
                {
                    "date": 1642194193266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n # flines = []\r\n # for line in lines:\r\n #     flines.append(\" \".join([word for word in line.split() if word.lower() not in stopw]))\r\n \r\n-def extract(text)\r\n+def extract(text):\r\n     notes = []\r\n \r\n     for para in text:  # Extractor\r\n         if not para or para == \"\":\r\n@@ -100,22 +100,22 @@\n                         )  # Add the sentence to the notes list if it is not already there.\r\n \r\n     return notes\r\n \r\n-with open(\"notes.md\", \"w\", encoding=\"utf8\") as f:\r\n-    print(\"\\033[1m\\033[1mHISTORY CLASS NOTES\")\r\n-    f.write('# **History Class Notes**\\n\\n')\r\n-    title = \"The Republicans Take Power\"\r\n+    with open(\"notes.md\", \"w\", encoding=\"utf8\") as f:\r\n+        print(\"\\033[1m\\033[1mHISTORY CLASS NOTES\")\r\n+        f.write('# **History Class Notes**\\n\\n')\r\n+        title = \"The Republicans Take Power\"\r\n \r\n-    f.write(f\"## **{title}**\\n\")\r\n-    # Print out our notes in bulleted form.\r\n-    print(title + '\\033[0m')\r\n-    for note in notes:\r\n-        if not note:\r\n-            continue\r\n-        if note.startswith('>>'):\r\n-            print(f'\\n\\033[1m{note[2:]}\\033[0m')  # Make headings bold\r\n-            f.write(f'\\n### {note[2:]}\\n\\n')\r\n\\ No newline at end of file\n-        else:\r\n-            f.write(f'- {note}\\n')\r\n+        f.write(f\"## **{title}**\\n\")\r\n+        # Print out our notes in bulleted form.\r\n+        print(title + '\\033[0m')\r\n+        for note in notes:\r\n+            if not note:\r\n+                continue\r\n+            if note.startswith('>>'):\r\n+                print(f'\\n\\033[1m{note[2:]}\\033[0m')  # Make headings bold\r\n+                f.write(f'\\n### {note[2:]}\\n\\n')\r\n+            else:\r\n+                f.write(f'- {note}\\n')\r\n \r\n-f.close()\n+    f.close()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642194199705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,8 +100,9 @@\n                         )  # Add the sentence to the notes list if it is not already there.\r\n \r\n     return notes\r\n \r\n+if __name__ == ''\r\n     with open(\"notes.md\", \"w\", encoding=\"utf8\") as f:\r\n         print(\"\\033[1m\\033[1mHISTORY CLASS NOTES\")\r\n         f.write('# **History Class Notes**\\n\\n')\r\n         title = \"The Republicans Take Power\"\r\n"
                },
                {
                    "date": 1642194219132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,14 +37,8 @@\n # f = open(\"ss.txt\", encoding=\"utf8\")\r\n \r\n # text = str(f.read()).split(\"\\n\")  # Get the text from the file\r\n \r\n-\r\n-#  Filter out unnecessary words like the, and, etc.\r\n-# flines = []\r\n-# for line in lines:\r\n-#     flines.append(\" \".join([word for word in line.split() if word.lower() not in stopw]))\r\n-\r\n def extract(text):\r\n     notes = []\r\n \r\n     for para in text:  # Extractor\r\n@@ -100,9 +94,9 @@\n                         )  # Add the sentence to the notes list if it is not already there.\r\n \r\n     return notes\r\n \r\n-if __name__ == ''\r\n+if __name__ == '__main__':\r\n     with open(\"notes.md\", \"w\", encoding=\"utf8\") as f:\r\n         print(\"\\033[1m\\033[1mHISTORY CLASS NOTES\")\r\n         f.write('# **History Class Notes**\\n\\n')\r\n         title = \"The Republicans Take Power\"\r\n"
                },
                {
                    "date": 1642194227318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,16 +28,11 @@\n     # text = [char for char in text if char not in punctuation]  # Remove punctuation\r\n     return text\r\n \r\n \r\n-# Get text from user input\r\n-text = multiinput(\"Enter text to take notes on: \")\r\n \r\n \r\n-# Get the text from a file\r\n-# f = open(\"ss.txt\", encoding=\"utf8\")\r\n \r\n-# text = str(f.read()).split(\"\\n\")  # Get the text from the file\r\n \r\n def extract(text):\r\n     notes = []\r\n \r\n"
                },
                {
                    "date": 1642194237567,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,12 +28,8 @@\n     # text = [char for char in text if char not in punctuation]  # Remove punctuation\r\n     return text\r\n \r\n \r\n-\r\n-\r\n-\r\n-\r\n def extract(text):\r\n     notes = []\r\n \r\n     for para in text:  # Extractor\r\n@@ -90,8 +86,13 @@\n \r\n     return notes\r\n \r\n if __name__ == '__main__':\r\n+    \r\n+\r\n+\r\n+    # Get text from user input\r\n+text = multiinput(\"Enter text to take notes on: \")\r\n     with open(\"notes.md\", \"w\", encoding=\"utf8\") as f:\r\n         print(\"\\033[1m\\033[1mHISTORY CLASS NOTES\")\r\n         f.write('# **History Class Notes**\\n\\n')\r\n         title = \"The Republicans Take Power\"\r\n"
                },
                {
                    "date": 1642194244021,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,12 +87,10 @@\n     return notes\r\n \r\n if __name__ == '__main__':\r\n     \r\n-\r\n-\r\n     # Get text from user input\r\n-text = multiinput(\"Enter text to take notes on: \")\r\n+    text = multiinput(\"Enter text to take notes on: \")\r\n     with open(\"notes.md\", \"w\", encoding=\"utf8\") as f:\r\n         print(\"\\033[1m\\033[1mHISTORY CLASS NOTES\")\r\n         f.write('# **History Class Notes**\\n\\n')\r\n         title = \"The Republicans Take Power\"\r\n"
                },
                {
                    "date": 1642194249554,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,14 +89,15 @@\n if __name__ == '__main__':\r\n     \r\n     # Get text from user input\r\n     text = multiinput(\"Enter text to take notes on: \")\r\n+    \r\n     with open(\"notes.md\", \"w\", encoding=\"utf8\") as f:\r\n         print(\"\\033[1m\\033[1mHISTORY CLASS NOTES\")\r\n         f.write('# **History Class Notes**\\n\\n')\r\n+    \r\n         title = \"The Republicans Take Power\"\r\n-\r\n-        f.write(f\"## **{title}**\\n\")\r\n+    f.write(f\"## **{title}**\\n\")\r\n         # Print out our notes in bulleted form.\r\n         print(title + '\\033[0m')\r\n         for note in notes:\r\n             if not note:\r\n"
                },
                {
                    "date": 1642194256306,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,10 +95,9 @@\n         print(\"\\033[1m\\033[1mHISTORY CLASS NOTES\")\r\n         f.write('# **History Class Notes**\\n\\n')\r\n     \r\n         title = \"The Republicans Take Power\"\r\n-    f.write(f\"## **{title}**\\n\")\r\n-        # Print out our notes in bulleted form.\r\n+        f.write(f\"## **{title}**\\n\")\r\n         print(title + '\\033[0m')\r\n         for note in notes:\r\n             if not note:\r\n                 continue\r\n"
                },
                {
                    "date": 1642194263205,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,9 +97,9 @@\n     \r\n         title = \"The Republicans Take Power\"\r\n         f.write(f\"## **{title}**\\n\")\r\n         print(title + '\\033[0m')\r\n-        for note in notes:\r\n+        for note in extract(text):\r\n             if not note:\r\n                 continue\r\n             if note.startswith('>>'):\r\n                 print(f'\\n\\033[1m{note[2:]}\\033[0m')  # Make headings bold\r\n"
                },
                {
                    "date": 1642194275818,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,8 +97,9 @@\n     \r\n         title = \"The Republicans Take Power\"\r\n         f.write(f\"## **{title}**\\n\")\r\n         print(title + '\\033[0m')\r\n+        \r\n         for note in extract(text):\r\n             if not note:\r\n                 continue\r\n             if note.startswith('>>'):\r\n"
                },
                {
                    "date": 1642194292466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,10 +76,9 @@\n                 word = \"\".join(\r\n                     [char for char in word if char not in punctuation]\r\n                 )  # Remove punctiuation (so 100,000 is read as 100000)\r\n                 if word[\r\n-                    :-1\r\n-                ].isnumeric():  # We're using word[:-1] so that words such as 1800s are valid\r\n+                    :-1].isnumeric():  # We're using word[:-1] so that words such as 1800s are valid\r\n                     if sent not in notes:\r\n                         notes.append(\r\n                             sent\r\n                         )  # Add the sentence to the notes list if it is not already there.\r\n@@ -99,13 +98,16 @@\n         f.write(f\"## **{title}**\\n\")\r\n         print(title + '\\033[0m')\r\n         \r\n         for note in extract(text):\r\n+        \r\n             if not note:\r\n                 continue\r\n+        \r\n             if note.startswith('>>'):\r\n                 print(f'\\n\\033[1m{note[2:]}\\033[0m')  # Make headings bold\r\n                 f.write(f'\\n### {note[2:]}\\n\\n')\r\n+        \r\n             else:\r\n                 f.write(f'- {note}\\n')\r\n \r\n     f.close()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642194309139,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,14 +75,12 @@\n             for word in nltk.word_tokenize(sent):\r\n                 word = \"\".join(\r\n                     [char for char in word if char not in punctuation]\r\n                 )  # Remove punctiuation (so 100,000 is read as 100000)\r\n-                if word[\r\n-                    :-1].isnumeric():  # We're using word[:-1] so that words such as 1800s are valid\r\n+                if word[:-1].isnumeric():  # We're using word[:-1] so that words such as 1800s are valid\r\n                     if sent not in notes:\r\n                         notes.append(\r\n-                            sent\r\n-                        )  # Add the sentence to the notes list if it is not already there.\r\n+                            sent)  # Add the sentence to the notes list if it is not already there.\r\n \r\n     return notes\r\n \r\n if __name__ == '__main__':\r\n"
                },
                {
                    "date": 1642194323720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,13 +74,12 @@\n         for sent in nltk.sent_tokenize(para):\r\n             for word in nltk.word_tokenize(sent):\r\n                 word = \"\".join(\r\n                     [char for char in word if char not in punctuation]\r\n-                )  # Remove punctiuation (so 100,000 is read as 100000)\r\n+                )  # Remove punctuation (so 100,000 is read as 100000)\r\n                 if word[:-1].isnumeric():  # We're using word[:-1] so that words such as 1800s are valid\r\n                     if sent not in notes:\r\n-                        notes.append(\r\n-                            sent)  # Add the sentence to the notes list if it is not already there.\r\n+                        notes.append(sent)  # Add the sentence to the notes list if it is not already there.\r\n \r\n     return notes\r\n \r\n if __name__ == '__main__':\r\n"
                },
                {
                    "date": 1642194338045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n         for sent in nltk.sent_tokenize(para):\r\n             for word in nltk.word_tokenize(sent):\r\n                 word = \"\".join(\r\n                     [char for char in word if char not in punctuation]\r\n-                )  # Remove punctuation (so 100,000 is read as 100000)\r\n+                )  # Remove punctiuation (so 100,000 is read as 100000)\r\n                 if word[:-1].isnumeric():  # We're using word[:-1] so that words such as 1800s are valid\r\n                     if sent not in notes:\r\n                         notes.append(sent)  # Add the sentence to the notes list if it is not already there.\r\n \r\n"
                },
                {
                    "date": 1642194347986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,8 @@\n         sentweights = {\r\n             k: v for k, v in sorted(sentweights.items(), key=lambda item: item[1])\r\n         }  # One-liner from SO: sort dict by value\r\n         summSent = list(sentweights.keys())[-1]\r\n-        unexp = list(sentweights.keys())[0]\r\n         if summSent not in notes:\r\n             notes.append(summSent)\r\n \r\n         # Get uncommon but noteworthy info\r\n@@ -74,9 +73,9 @@\n         for sent in nltk.sent_tokenize(para):\r\n             for word in nltk.word_tokenize(sent):\r\n                 word = \"\".join(\r\n                     [char for char in word if char not in punctuation]\r\n-                )  # Remove punctiuation (so 100,000 is read as 100000)\r\n+                )  # Remove punctuation (so 100,000 is read as 100000)\r\n                 if word[:-1].isnumeric():  # We're using word[:-1] so that words such as 1800s are valid\r\n                     if sent not in notes:\r\n                         notes.append(sent)  # Add the sentence to the notes list if it is not already there.\r\n \r\n"
                },
                {
                    "date": 1642194355461,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,8 +65,9 @@\n         if summSent not in notes:\r\n             notes.append(summSent)\r\n \r\n         # Get uncommon but noteworthy info\r\n+        unexp = list(sentweights.keys())[0]\r\n         if unexp not in notes:\r\n             notes.append(unexp)\r\n \r\n         # Get numerical info\r\n"
                },
                {
                    "date": 1642194370808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,8 +60,9 @@\n \r\n         sentweights = {\r\n             k: v for k, v in sorted(sentweights.items(), key=lambda item: item[1])\r\n         }  # One-liner from SO: sort dict by value\r\n+        \r\n         summSent = list(sentweights.keys())[-1]\r\n         if summSent not in notes:\r\n             notes.append(summSent)\r\n \r\n"
                },
                {
                    "date": 1642194481535,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n \"\"\"\r\n import nltk  # Import NLTK for language processing\r\n from string import punctuation\r\n \r\n+nltk.download(stopwords)\r\n \r\n def multiinput(prompt):\r\n     print(prompt)\r\n     print(\"Press Ctrl+C to finish.\\n\")\r\n"
                },
                {
                    "date": 1642194488039,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n \"\"\"\r\n import nltk  # Import NLTK for language processing\r\n from string import punctuation\r\n \r\n-nltk.download(stopwords)\r\n+nltk.download(\"stopwords)\r\n \r\n def multiinput(prompt):\r\n     print(prompt)\r\n     print(\"Press Ctrl+C to finish.\\n\")\r\n"
                },
                {
                    "date": 1642194493769,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n \"\"\"\r\n import nltk  # Import NLTK for language processing\r\n from string import punctuation\r\n \r\n-nltk.download(\"stopwords)\r\n+nltk.download(\"stopwords\")\r\n \r\n def multiinput(prompt):\r\n     print(prompt)\r\n     print(\"Press Ctrl+C to finish.\\n\")\r\n"
                },
                {
                    "date": 1642194503671,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n \"\"\"\r\n import nltk  # Import NLTK for language processing\r\n from string import punctuation\r\n \r\n-nltk.download(\"stopwords\")\r\n+nltk.download(\"stopwords\", )\r\n \r\n def multiinput(prompt):\r\n     print(prompt)\r\n     print(\"Press Ctrl+C to finish.\\n\")\r\n"
                },
                {
                    "date": 1642194510727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,10 @@\n \"\"\"\r\n import nltk  # Import NLTK for language processing\r\n from string import punctuation\r\n \r\n-nltk.download(\"stopwords\", )\r\n+nltk.download(\"stopwords\", quiet=True)\r\n+nltk.download(\"stopwords\", quiet=True)\r\n \r\n def multiinput(prompt):\r\n     print(prompt)\r\n     print(\"Press Ctrl+C to finish.\\n\")\r\n"
                },
                {
                    "date": 1642194519127,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n import nltk  # Import NLTK for language processing\r\n from string import punctuation\r\n \r\n nltk.download(\"stopwords\", quiet=True)\r\n-nltk.download(\"stopwords\", quiet=True)\r\n+nltk.download(\"punktt\", quiet=True)\r\n \r\n def multiinput(prompt):\r\n     print(prompt)\r\n     print(\"Press Ctrl+C to finish.\\n\")\r\n"
                },
                {
                    "date": 1642887891215,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n import nltk  # Import NLTK for language processing\r\n from string import punctuation\r\n \r\n nltk.download(\"stopwords\", quiet=True)\r\n-nltk.download(\"punktt\", quiet=True)\r\n+nltk.download(\"punkt\", quiet=True)\r\n \r\n def multiinput(prompt):\r\n     print(prompt)\r\n     print(\"Press Ctrl+C to finish.\\n\")\r\n@@ -23,8 +23,9 @@\n stopw = nltk.corpus.stopwords.words()\r\n \r\n \r\n def prep(text):\r\n+    text = text.replace('\\r\\n', ' ')\r\n     text = [\r\n         word.lower() for word in text.split() if word.lower() not in stopw\r\n     ]  # Remove unnecessary words\r\n     # text = [char for char in text if char not in punctuation]  # Remove punctuation\r\n@@ -32,17 +33,17 @@\n \r\n \r\n def extract(text):\r\n     notes = []\r\n-\r\n     for para in text:  # Extractor\r\n         if not para or para == \"\":\r\n             continue  # Skip blank lines\r\n         if \">>\" in para:\r\n             notes.append(para)  # Append headings; we'll render them later\r\n             continue\r\n-\r\n+        maxSent = len(nltk.sent_tokenize(para)) - 3 if len(nltk.sent_tokenize(para)) > 2 else 1\r\n         topicSent = nltk.sent_tokenize(para)[0]  # para[0:para.find('. ')]\r\n+        totalSent = 1\r\n         # Use the first sentence of each paragraph as a topic sentence (if it isn't already in the notes)\r\n         if topicSent not in notes:\r\n             notes.append(topicSent)\r\n \r\n@@ -64,26 +65,38 @@\n             k: v for k, v in sorted(sentweights.items(), key=lambda item: item[1])\r\n         }  # One-liner from SO: sort dict by value\r\n         \r\n         summSent = list(sentweights.keys())[-1]\r\n-        if summSent not in notes:\r\n+        if summSent not in notes and totalSent <= maxSent:\r\n             notes.append(summSent)\r\n+            totalSent += 1\r\n \r\n         # Get uncommon but noteworthy info\r\n         unexp = list(sentweights.keys())[0]\r\n-        if unexp not in notes:\r\n+        if unexp not in notes and totalSent <= maxSent:\r\n             notes.append(unexp)\r\n+            totalSent += 1\r\n \r\n-        # Get numerical info\r\n+\r\n+\r\n+        # Get quotes & numerical info\r\n         for sent in nltk.sent_tokenize(para):\r\n+            \r\n+            if '“' in sent or '”' in sent:\r\n+                if sent not in notes and totalSent <= maxSent:\r\n+                    notes.append(sent)\r\n+                    totalSent += 1\r\n+                    continue\r\n             for word in nltk.word_tokenize(sent):\r\n                 word = \"\".join(\r\n                     [char for char in word if char not in punctuation]\r\n                 )  # Remove punctuation (so 100,000 is read as 100000)\r\n                 if word[:-1].isnumeric():  # We're using word[:-1] so that words such as 1800s are valid\r\n-                    if sent not in notes:\r\n+                    if sent not in notes and totalSent <= maxSent:\r\n                         notes.append(sent)  # Add the sentence to the notes list if it is not already there.\r\n+                        totalSent += 1\r\n \r\n+\r\n     return notes\r\n \r\n if __name__ == '__main__':\r\n     \r\n"
                },
                {
                    "date": 1643422931209,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,126 +1,127 @@\n-\"\"\"\r\n-autonote - A program to automatically take notes in textbooks.\r\n-\"\"\"\r\n-import nltk  # Import NLTK for language processing\r\n-from string import punctuation\r\n-\r\n-nltk.download(\"stopwords\", quiet=True)\r\n-nltk.download(\"punkt\", quiet=True)\r\n-\r\n-def multiinput(prompt):\r\n-    print(prompt)\r\n-    print(\"Press Ctrl+C to finish.\\n\")\r\n-    contents = []\r\n-    while True:\r\n-        try:\r\n-            line = input()\r\n-        except (EOFError, KeyboardInterrupt):\r\n-            print()\r\n-            break\r\n-        contents.append(line)\r\n-    return contents\r\n-\r\n-stopw = nltk.corpus.stopwords.words()\r\n-\r\n-\r\n-def prep(text):\r\n-    text = text.replace('\\r\\n', ' ')\r\n-    text = [\r\n-        word.lower() for word in text.split() if word.lower() not in stopw\r\n-    ]  # Remove unnecessary words\r\n-    # text = [char for char in text if char not in punctuation]  # Remove punctuation\r\n-    return text\r\n-\r\n-\r\n-def extract(text):\r\n-    notes = []\r\n-    for para in text:  # Extractor\r\n-        if not para or para == \"\":\r\n-            continue  # Skip blank lines\r\n-        if \">>\" in para:\r\n-            notes.append(para)  # Append headings; we'll render them later\r\n-            continue\r\n-        maxSent = len(nltk.sent_tokenize(para)) - 3 if len(nltk.sent_tokenize(para)) > 2 else 1\r\n-        topicSent = nltk.sent_tokenize(para)[0]  # para[0:para.find('. ')]\r\n-        totalSent = 1\r\n-        # Use the first sentence of each paragraph as a topic sentence (if it isn't already in the notes)\r\n-        if topicSent not in notes:\r\n-            notes.append(topicSent)\r\n-\r\n-        # Get summary of paragraph\r\n-        freqs = {}\r\n-        sentweights = {}\r\n-        for word in prep(para):\r\n-\r\n-            freqs.setdefault(word, 0)\r\n-            freqs[word] += 0.2\r\n-\r\n-        for sent in nltk.sent_tokenize(para):\r\n-            for word in freqs:\r\n-                if word in sent:\r\n-                    sentweights.setdefault(sent, 0)\r\n-                    sentweights[sent] += freqs[word]\r\n-\r\n-        sentweights = {\r\n-            k: v for k, v in sorted(sentweights.items(), key=lambda item: item[1])\r\n-        }  # One-liner from SO: sort dict by value\r\n-        \r\n-        summSent = list(sentweights.keys())[-1]\r\n-        if summSent not in notes and totalSent <= maxSent:\r\n-            notes.append(summSent)\r\n-            totalSent += 1\r\n-\r\n-        # Get uncommon but noteworthy info\r\n-        unexp = list(sentweights.keys())[0]\r\n-        if unexp not in notes and totalSent <= maxSent:\r\n-            notes.append(unexp)\r\n-            totalSent += 1\r\n-\r\n-\r\n-\r\n-        # Get quotes & numerical info\r\n-        for sent in nltk.sent_tokenize(para):\r\n-            \r\n-            if '“' in sent or '”' in sent:\r\n-                if sent not in notes and totalSent <= maxSent:\r\n-                    notes.append(sent)\r\n-                    totalSent += 1\r\n-                    continue\r\n-            for word in nltk.word_tokenize(sent):\r\n-                word = \"\".join(\r\n-                    [char for char in word if char not in punctuation]\r\n-                )  # Remove punctuation (so 100,000 is read as 100000)\r\n-                if word[:-1].isnumeric():  # We're using word[:-1] so that words such as 1800s are valid\r\n-                    if sent not in notes and totalSent <= maxSent:\r\n-                        notes.append(sent)  # Add the sentence to the notes list if it is not already there.\r\n-                        totalSent += 1\r\n-\r\n-\r\n-    return notes\r\n-\r\n-if __name__ == '__main__':\r\n-    \r\n-    # Get text from user input\r\n-    text = multiinput(\"Enter text to take notes on: \")\r\n-    \r\n-    with open(\"notes.md\", \"w\", encoding=\"utf8\") as f:\r\n-        print(\"\\033[1m\\033[1mHISTORY CLASS NOTES\")\r\n-        f.write('# **History Class Notes**\\n\\n')\r\n-    \r\n-        title = \"The Republicans Take Power\"\r\n-        f.write(f\"## **{title}**\\n\")\r\n-        print(title + '\\033[0m')\r\n-        \r\n-        for note in extract(text):\r\n-        \r\n-            if not note:\r\n-                continue\r\n-        \r\n-            if note.startswith('>>'):\r\n-                print(f'\\n\\033[1m{note[2:]}\\033[0m')  # Make headings bold\r\n-                f.write(f'\\n### {note[2:]}\\n\\n')\r\n-        \r\n-            else:\r\n-                f.write(f'- {note}\\n')\r\n-\r\n+\"\"\"\n+autonote - A program to automatically take notes in textbooks.\n+\"\"\"\n+import nltk  # Import NLTK for language processing\n+from string import punctuation\n+\n+nltk.download(\"stopwords\", quiet=True)\n+nltk.download(\"punkt\", quiet=True)\n+\n+def multiinput(prompt):\n+    print(prompt)\n+    print(\"Press Ctrl+C to finish.\\n\")\n+    contents = []\n+    while True:\n+        try:\n+            line = input()\n+        except (EOFError, KeyboardInterrupt):\n+            print()\n+            break\n+        contents.append(line)\n+    return contents\n+\n+stopw = nltk.corpus.stopwords.words()\n+\n+\n+\n+def prep(text):\n+    text = text.replace('\\r\\n', ' ')\n+    text = [\n+        word.lower() for word in text.split() if word.lower() not in stopw\n+    ]  # Remove unnecessary words\n+    # text = [char for char in text if char not in punctuation]  # Remove punctuation\n+    return text\n+\n+\n+def extract(text):\n+    notes = []\n+    for para in text:  # Extractor\n+        if not para or para == \"\":\n+            continue  # Skip blank lines\n+        if \">>\" in para:\n+            notes.append(para)  # Append headings; we'll render them later\n+            continue\n+        maxSent = len(nltk.sent_tokenize(para)) - 3 if len(nltk.sent_tokenize(para)) > 2 else 1\n+        topicSent = nltk.sent_tokenize(para)[0]  # para[0:para.find('. ')]\n+        totalSent = 1\n+        # Use the first sentence of each paragraph as a topic sentence (if it isn't already in the notes)\n+        if topicSent not in notes:\n+            notes.append(topicSent)\n+\n+        # Get summary of paragraph\n+        freqs = {}\n+        sentweights = {}\n+        for word in prep(para):\n+\n+            freqs.setdefault(word, 0)\n+            freqs[word] += 0.2\n+\n+        for sent in nltk.sent_tokenize(para):\n+            for word in freqs:\n+                if word in sent:\n+                    sentweights.setdefault(sent, 0)\n+                    sentweights[sent] += freqs[word]\n+\n+        sentweights = {\n+            k: v for k, v in sorted(sentweights.items(), key=lambda item: item[1])\n+        }  # One-liner from SO: sort dict by value\n+        \n+        summSent = list(sentweights.keys())[-1]\n+        if summSent not in notes and totalSent <= maxSent:\n+            notes.append(summSent)\n+            totalSent += 1\n+\n+        # Get uncommon but noteworthy info\n+        unexp = list(sentweights.keys())[0]\n+        if unexp not in notes and totalSent <= maxSent:\n+            notes.append(unexp)\n+            totalSent += 1\n+\n+\n+\n+        # Get quotes & numerical info\n+        for sent in nltk.sent_tokenize(para):\n+            \n+            if '“' in sent or '”' in sent:\n+                if sent not in notes and totalSent <= maxSent:\n+                    notes.append(sent)\n+                    totalSent += 1\n+                    continue\n+            for word in nltk.word_tokenize(sent):\n+                word = \"\".join(\n+                    [char for char in word if char not in punctuation]\n+                )  # Remove punctuation (so 100,000 is read as 100000)\n+                if word[:-1].isnumeric():  # We're using word[:-1] so that words such as 1800s are valid\n+                    if sent not in notes and totalSent <= maxSent:\n+                        notes.append(sent)  # Add the sentence to the notes list if it is not already there.\n+                        totalSent += 1\n+\n+\n+    return notes\n+\n+if __name__ == '__main__':\n+    \n+    # Get text from user input\n+    text = multiinput(\"Enter text to take notes on: \")\n+    \n+    with open(\"notes.md\", \"w\", encoding=\"utf8\") as f:\n+        print(\"\\033[1m\\033[1mHISTORY CLASS NOTES\")\n+        f.write('# **History Class Notes**\\n\\n')\n+    \n+        title = \"The Republicans Take Power\"\n+        f.write(f\"## **{title}**\\n\")\n+        print(title + '\\033[0m')\n+        \n+        for note in extract(text):\n+        \n+            if not note:\n+                continue\n+        \n+            if note.startswith('>>'):\n+                print(f'\\n\\033[1m{note[2:]}\\033[0m')  # Make headings bold\n+                f.write(f'\\n### {note[2:]}\\n\\n')\n+        \n+            else:\n+                f.write(f'- {note}\\n')\n+\n     f.close()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1643422937914,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,10 +21,10 @@\n     return contents\n \n stopw = nltk.corpus.stopwords.words()\n \n+def sent_tok(para)\n \n-\n def prep(text):\n     text = text.replace('\\r\\n', ' ')\n     text = [\n         word.lower() for word in text.split() if word.lower() not in stopw\n"
                },
                {
                    "date": 1643422946106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n autonote - A program to automatically take notes in textbooks.\n \"\"\"\n import nltk  # Import NLTK for language processing\n from string import punctuation\n+import re\n \n nltk.download(\"stopwords\", quiet=True)\n nltk.download(\"punkt\", quiet=True)\n \n"
                },
                {
                    "date": 1643422960010,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,10 @@\n     return contents\n \n stopw = nltk.corpus.stopwords.words()\n \n-def sent_tok(para)\n+def sent_tok(para):\n+    \n \n def prep(text):\n     text = text.replace('\\r\\n', ' ')\n     text = [\n"
                },
                {
                    "date": 1643422967903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n \n stopw = nltk.corpus.stopwords.words()\n \n def sent_tok(para):\n-    return re.spl\n+    return re.spli\n \n def prep(text):\n     text = text.replace('\\r\\n', ' ')\n     text = [\n"
                },
                {
                    "date": 1643423770900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,10 +131,9 @@\n will\n just\n don\n should\n-now\n-\"\"\"\n+now\"\"\"\n \n nltk.download(\"stopwords\", quiet=True)\n \n def multiinput(prompt):\n"
                }
            ],
            "date": 1642194160054,
            "name": "Commit-0",
            "content": "\"\"\"\r\nautonote - A program to automatically take notes in textbooks.\r\n\"\"\"\r\nimport nltk  # Import NLTK for language processing\r\nfrom string import punctuation\r\n\r\n\r\ndef multiinput(prompt):\r\n    print(prompt)\r\n    print(\"Press Ctrl+C to finish.\\n\")\r\n    contents = []\r\n    while True:\r\n        try:\r\n            line = input()\r\n        except (EOFError, KeyboardInterrupt):\r\n            print()\r\n            break\r\n        contents.append(line)\r\n    return contents\r\n\r\nstopw = nltk.corpus.stopwords.words()\r\n\r\n\r\ndef prep(text):\r\n    text = [\r\n        word.lower() for word in text.split() if word.lower() not in stopw\r\n    ]  # Remove unnecessary words\r\n    # text = [char for char in text if char not in punctuation]  # Remove punctuation\r\n    return text\r\n\r\n\r\n# Get text from user input\r\ntext = multiinput(\"Enter text to take notes on: \")\r\n\r\n\r\n# Get the text from a file\r\n# f = open(\"ss.txt\", encoding=\"utf8\")\r\n\r\n# text = str(f.read()).split(\"\\n\")  # Get the text from the file\r\n\r\n\r\n#  Filter out unnecessary words like the, and, etc.\r\n# flines = []\r\n# for line in lines:\r\n#     flines.append(\" \".join([word for word in line.split() if word.lower() not in stopw]))\r\n\r\n    notes = []\r\n\r\n    for para in text:  # Extractor\r\n        if not para or para == \"\":\r\n            continue  # Skip blank lines\r\n        if \">>\" in para:\r\n            notes.append(para)  # Append headings; we'll render them later\r\n            continue\r\n\r\n        topicSent = nltk.sent_tokenize(para)[0]  # para[0:para.find('. ')]\r\n        # Use the first sentence of each paragraph as a topic sentence (if it isn't already in the notes)\r\n        if topicSent not in notes:\r\n            notes.append(topicSent)\r\n\r\n        # Get summary of paragraph\r\n        freqs = {}\r\n        sentweights = {}\r\n        for word in prep(para):\r\n\r\n            freqs.setdefault(word, 0)\r\n            freqs[word] += 0.2\r\n\r\n        for sent in nltk.sent_tokenize(para):\r\n            for word in freqs:\r\n                if word in sent:\r\n                    sentweights.setdefault(sent, 0)\r\n                    sentweights[sent] += freqs[word]\r\n\r\n        sentweights = {\r\n            k: v for k, v in sorted(sentweights.items(), key=lambda item: item[1])\r\n        }  # One-liner from SO: sort dict by value\r\n        summSent = list(sentweights.keys())[-1]\r\n        unexp = list(sentweights.keys())[0]\r\n        if summSent not in notes:\r\n            notes.append(summSent)\r\n\r\n        # Get uncommon but noteworthy info\r\n        if unexp not in notes:\r\n            notes.append(unexp)\r\n\r\n        # Get numerical info\r\n        for sent in nltk.sent_tokenize(para):\r\n            for word in nltk.word_tokenize(sent):\r\n                word = \"\".join(\r\n                    [char for char in word if char not in punctuation]\r\n                )  # Remove punctiuation (so 100,000 is read as 100000)\r\n                if word[\r\n                    :-1\r\n                ].isnumeric():  # We're using word[:-1] so that words such as 1800s are valid\r\n                    if sent not in notes:\r\n                        notes.append(\r\n                            sent\r\n                        )  # Add the sentence to the notes list if it is not already there.\r\n\r\nwith open(\"notes.md\", \"w\", encoding=\"utf8\") as f:\r\n    print(\"\\033[1m\\033[1mHISTORY CLASS NOTES\")\r\n    f.write('# **History Class Notes**\\n\\n')\r\n    title = \"The Republicans Take Power\"\r\n\r\n    f.write(f\"## **{title}**\\n\")\r\n    # Print out our notes in bulleted form.\r\n    print(title + '\\033[0m')\r\n    for note in notes:\r\n        if not note:\r\n            continue\r\n        if note.startswith('>>'):\r\n            print(f'\\n\\033[1m{note[2:]}\\033[0m')  # Make headings bold\r\n            f.write(f'\\n### {note[2:]}\\n\\n')\r\n        else:\r\n            f.write(f'- {note}\\n')\r\n\r\nf.close()"
        }
    ]
}